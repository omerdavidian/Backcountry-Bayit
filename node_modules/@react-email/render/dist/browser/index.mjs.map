{"version":3,"file":"index.mjs","names":["defaults: Options","plainTextSelectors: SelectorDefinition[]","html","chunks: Uint8Array[]","html"],"sources":["../../src/shared/utils/pretty.ts","../../src/shared/utils/to-plain-text.ts","../../src/shared/read-stream.browser.ts","../../src/browser/render.tsx","../../src/browser/index.ts"],"sourcesContent":["import type { Options, Plugin } from 'prettier';\nimport type { builders } from 'prettier/doc';\nimport * as html from 'prettier/plugins/html';\nimport { format } from 'prettier/standalone';\n\ninterface HtmlNode {\n  type: 'element' | 'text' | 'ieConditionalComment';\n  name?: string;\n  sourceSpan: {\n    start: { file: unknown[]; offset: number; line: number; col: number };\n    end: { file: unknown[]; offset: number; line: number; col: number };\n    details: null;\n  };\n  parent?: HtmlNode;\n}\n\nfunction recursivelyMapDoc(\n  doc: builders.Doc,\n  callback: (innerDoc: string | builders.DocCommand) => builders.Doc,\n): builders.Doc {\n  if (Array.isArray(doc)) {\n    return doc.map((innerDoc) => recursivelyMapDoc(innerDoc, callback));\n  }\n\n  if (typeof doc === 'object') {\n    if (doc.type === 'group') {\n      return {\n        ...doc,\n        contents: recursivelyMapDoc(doc.contents, callback),\n        expandedStates: recursivelyMapDoc(\n          doc.expandedStates,\n          callback,\n        ) as builders.Doc[],\n      };\n    }\n\n    if ('contents' in doc) {\n      return {\n        ...doc,\n        contents: recursivelyMapDoc(doc.contents, callback),\n      };\n    }\n\n    if ('parts' in doc) {\n      return {\n        ...doc,\n        parts: recursivelyMapDoc(doc.parts, callback) as builders.Doc[],\n      };\n    }\n\n    if (doc.type === 'if-break') {\n      return {\n        ...doc,\n        breakContents: recursivelyMapDoc(doc.breakContents, callback),\n        flatContents: recursivelyMapDoc(doc.flatContents, callback),\n      };\n    }\n  }\n\n  return callback(doc);\n}\n\nconst modifiedHtml = { ...html } as Plugin;\nif (modifiedHtml.printers) {\n  const previousPrint = modifiedHtml.printers.html.print;\n  modifiedHtml.printers.html.print = (path, options, print, args) => {\n    const node = path.getNode() as HtmlNode;\n\n    const rawPrintingResult = previousPrint(path, options, print, args);\n\n    if (node.type === 'ieConditionalComment') {\n      const printingResult = recursivelyMapDoc(rawPrintingResult, (doc) => {\n        if (typeof doc === 'object' && doc.type === 'line') {\n          return doc.soft ? '' : ' ';\n        }\n\n        return doc;\n      });\n\n      return printingResult;\n    }\n\n    return rawPrintingResult;\n  };\n}\n\nconst defaults: Options = {\n  endOfLine: 'lf',\n  tabWidth: 2,\n  plugins: [modifiedHtml],\n  bracketSameLine: true,\n  parser: 'html',\n};\n\nexport const pretty = (str: string, options: Options = {}) => {\n  return format(str.replaceAll('\\0', ''), {\n    ...defaults,\n    ...options,\n  });\n};\n","import {\n  convert,\n  type HtmlToTextOptions,\n  type SelectorDefinition,\n} from 'html-to-text';\n\nexport const plainTextSelectors: SelectorDefinition[] = [\n  { selector: 'img', format: 'skip' },\n  { selector: '[data-skip-in-text=true]', format: 'skip' },\n  {\n    selector: 'a',\n    options: { linkBrackets: false, hideLinkHrefIfSameAsText: true },\n  },\n];\n\nexport function toPlainText(html: string, options?: HtmlToTextOptions) {\n  return convert(html, {\n    selectors: plainTextSelectors,\n    wordwrap: false,\n    ...options,\n  });\n}\n","import type { ReactDOMServerReadableStream } from 'react-dom/server.browser';\n\nconst decoder = new TextDecoder('utf-8');\n\nexport const readStream = async (stream: ReactDOMServerReadableStream) => {\n  const chunks: Uint8Array[] = [];\n\n  const writableStream = new WritableStream({\n    write(chunk: Uint8Array) {\n      chunks.push(chunk);\n    },\n    abort(reason) {\n      throw new Error('Stream aborted', {\n        cause: {\n          reason,\n        },\n      });\n    },\n  });\n  await stream.pipeTo(writableStream);\n\n  let length = 0;\n  chunks.forEach((item) => {\n    length += item.length;\n  });\n  const mergedChunks = new Uint8Array(length);\n  let offset = 0;\n  chunks.forEach((item) => {\n    mergedChunks.set(item, offset);\n    offset += item.length;\n  });\n\n  return decoder.decode(mergedChunks);\n};\n","import { Suspense } from 'react';\nimport { pretty, toPlainText } from '../node';\nimport type { Options } from '../shared/options';\nimport { readStream } from '../shared/read-stream.browser';\n\nexport const render = async (node: React.ReactNode, options?: Options) => {\n  const suspendedElement = <Suspense>{node}</Suspense>;\n  const reactDOMServer = await import('react-dom/server.browser').then(\n    // This is beacuse react-dom/server is CJS\n    (m) => m.default,\n  );\n\n  const html = await new Promise<string>((resolve, reject) => {\n    reactDOMServer\n      .renderToReadableStream(suspendedElement, {\n        onError(error: unknown) {\n          reject(error);\n        },\n        progressiveChunkSize: Number.POSITIVE_INFINITY,\n      })\n      .then(readStream)\n      .then(resolve)\n      .catch(reject);\n  });\n\n  if (options?.plainText) {\n    return toPlainText(html, options.htmlToTextOptions);\n  }\n\n  const doctype =\n    '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">';\n\n  const document = `${doctype}${html.replace(/<!DOCTYPE.*?>/, '')}`;\n\n  if (options?.pretty) {\n    return pretty(document);\n  }\n\n  return document;\n};\n","import type { Options } from '../shared/options';\nimport { render } from './render';\n\n/**\n * @deprecated use {@link render}\n */\nexport const renderAsync = (element: React.ReactElement, options?: Options) => {\n  return render(element, options);\n};\n\nexport * from '../shared/options';\nexport * from '../shared/utils/pretty';\nexport * from '../shared/utils/to-plain-text';\nexport * from './render';\n"],"mappings":"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"}